//go:generate mockgen -package=discord -source=session.go -destination=session_mock.go
package discord

import (
	"image"
	"io"
	"time"

	"github.com/bwmarrin/discordgo"
)

type Session interface {
	Request(method, urlStr string, data interface{}) (response []byte, err error)
	RequestWithBucketID(method, urlStr string, data interface{}, bucketID string) (response []byte, err error)
	RequestWithLockedBucket(method, urlStr, contentType string, b []byte, bucket *discordgo.Bucket, sequence int) (response []byte, err error)
	User(userID string) (st *discordgo.User, err error)
	UserAvatar(userID string) (img image.Image, err error)
	UserAvatarDecode(u *discordgo.User) (img image.Image, err error)
	UserUpdate(username, avatar string) (st *discordgo.User, err error)
	UserConnections() (conn []*discordgo.UserConnection, err error)
	UserChannelCreate(recipientID string) (st *discordgo.Channel, err error)
	UserGuildMember(guildID string) (st *discordgo.Member, err error)
	UserGuilds(limit int, beforeID, afterID string) (st []*discordgo.UserGuild, err error)
	UserChannelPermissions(userID, channelID string) (apermissions int64, err error)
	Guild(guildID string) (st *discordgo.Guild, err error)
	GuildWithCounts(guildID string) (st *discordgo.Guild, err error)
	GuildPreview(guildID string) (st *discordgo.GuildPreview, err error)
	GuildCreate(name string) (st *discordgo.Guild, err error)
	GuildEdit(guildID string, g *discordgo.GuildParams) (st *discordgo.Guild, err error)
	GuildDelete(guildID string) (st *discordgo.Guild, err error)
	GuildLeave(guildID string) (err error)
	GuildBans(guildID string, limit int, beforeID, afterID string) (st []*discordgo.GuildBan, err error)
	GuildBanCreate(guildID, userID string, days int) (err error)
	GuildBan(guildID, userID string) (st *discordgo.GuildBan, err error)
	GuildBanCreateWithReason(guildID, userID, reason string, days int) (err error)
	GuildBanDelete(guildID, userID string) (err error)
	GuildMembers(guildID string, after string, limit int) (st []*discordgo.Member, err error)
	GuildMembersSearch(guildID, query string, limit int) (st []*discordgo.Member, err error)
	GuildMember(guildID, userID string) (st *discordgo.Member, err error)
	GuildMemberAdd(guildID, userID string, data *discordgo.GuildMemberAddParams) (err error)
	GuildMemberDelete(guildID, userID string) (err error)
	GuildMemberDeleteWithReason(guildID, userID, reason string) (err error)
	GuildMemberEdit(guildID, userID string, data *discordgo.GuildMemberParams) (st *discordgo.Member, err error)
	GuildMemberEditComplex(guildID, userID string, data *discordgo.GuildMemberParams) (st *discordgo.Member, err error)
	GuildMemberMove(guildID string, userID string, channelID *string) (err error)
	GuildMemberNickname(guildID, userID, nickname string) (err error)
	GuildMemberMute(guildID string, userID string, mute bool) (err error)
	GuildMemberTimeout(guildID string, userID string, until *time.Time) (err error)
	GuildMemberDeafen(guildID string, userID string, deaf bool) (err error)
	GuildMemberRoleAdd(guildID, userID, roleID string) (err error)
	GuildMemberRoleRemove(guildID, userID, roleID string) (err error)
	GuildChannels(guildID string) (st []*discordgo.Channel, err error)
	GuildChannelCreateComplex(guildID string, data discordgo.GuildChannelCreateData) (st *discordgo.Channel, err error)
	GuildChannelCreate(guildID, name string, ctype discordgo.ChannelType) (st *discordgo.Channel, err error)
	GuildChannelsReorder(guildID string, channels []*discordgo.Channel) (err error)
	GuildInvites(guildID string) (st []*discordgo.Invite, err error)
	GuildRoles(guildID string) (st []*discordgo.Role, err error)
	GuildRoleCreate(guildID string, data *discordgo.RoleParams) (st *discordgo.Role, err error)
	GuildRoleEdit(guildID, roleID string, data *discordgo.RoleParams) (st *discordgo.Role, err error)
	GuildRoleReorder(guildID string, roles []*discordgo.Role) (st []*discordgo.Role, err error)
	GuildRoleDelete(guildID, roleID string) (err error)
	GuildPruneCount(guildID string, days uint32) (count uint32, err error)
	GuildPrune(guildID string, days uint32) (count uint32, err error)
	GuildIntegrations(guildID string) (st []*discordgo.Integration, err error)
	GuildIntegrationCreate(guildID, integrationType, integrationID string) (err error)
	GuildIntegrationEdit(guildID, integrationID string, expireBehavior, expireGracePeriod int, enableEmoticons bool) (err error)
	GuildIntegrationDelete(guildID, integrationID string) (err error)
	GuildIcon(guildID string) (img image.Image, err error)
	GuildSplash(guildID string) (img image.Image, err error)
	GuildEmbed(guildID string) (st *discordgo.GuildEmbed, err error)
	GuildEmbedEdit(guildID string, data *discordgo.GuildEmbed) (err error)
	GuildAuditLog(guildID, userID, beforeID string, actionType, limit int) (st *discordgo.GuildAuditLog, err error)
	GuildEmojis(guildID string) (emoji []*discordgo.Emoji, err error)
	GuildEmoji(guildID, emojiID string) (emoji *discordgo.Emoji, err error)
	GuildEmojiCreate(guildID string, data *discordgo.EmojiParams) (emoji *discordgo.Emoji, err error)
	GuildEmojiEdit(guildID, emojiID string, data *discordgo.EmojiParams) (emoji *discordgo.Emoji, err error)
	GuildEmojiDelete(guildID, emojiID string) (err error)
	GuildTemplate(templateCode string) (st *discordgo.GuildTemplate, err error)
	GuildCreateWithTemplate(templateCode, name, icon string) (st *discordgo.Guild, err error)
	GuildTemplates(guildID string) (st []*discordgo.GuildTemplate, err error)
	GuildTemplateCreate(guildID string, data *discordgo.GuildTemplateParams) (st *discordgo.GuildTemplate)
	GuildTemplateSync(guildID, templateCode string) (err error)
	GuildTemplateEdit(guildID, templateCode string, data *discordgo.GuildTemplateParams) (st *discordgo.GuildTemplate, err error)
	GuildTemplateDelete(guildID, templateCode string) (err error)
	Channel(channelID string) (st *discordgo.Channel, err error)
	ChannelEdit(channelID string, data *discordgo.ChannelEdit) (st *discordgo.Channel, err error)
	ChannelEditComplex(channelID string, data *discordgo.ChannelEdit) (st *discordgo.Channel, err error)
	ChannelDelete(channelID string) (st *discordgo.Channel, err error)
	ChannelTyping(channelID string) (err error)
	ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string) (st []*discordgo.Message, err error)
	ChannelMessage(channelID, messageID string) (st *discordgo.Message, err error)
	ChannelMessageSend(channelID string, content string) (*discordgo.Message, error)
	ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (st *discordgo.Message, err error)
	ChannelMessageSendTTS(channelID string, content string) (*discordgo.Message, error)
	ChannelMessageSendEmbed(channelID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error)
	ChannelMessageSendEmbeds(channelID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error)
	ChannelMessageSendReply(channelID string, content string, reference *discordgo.MessageReference) (*discordgo.Message, error)
	ChannelMessageSendEmbedReply(channelID string, embed *discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error)
	ChannelMessageSendEmbedsReply(channelID string, embeds []*discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error)
	ChannelMessageEdit(channelID, messageID, content string) (*discordgo.Message, error)
	ChannelMessageEditComplex(m *discordgo.MessageEdit) (st *discordgo.Message, err error)
	ChannelMessageEditEmbed(channelID, messageID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error)
	ChannelMessageEditEmbeds(channelID, messageID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error)
	ChannelMessageDelete(channelID, messageID string) (err error)
	ChannelMessagesBulkDelete(channelID string, messages []string) (err error)
	ChannelMessagePin(channelID, messageID string) (err error)
	ChannelMessageUnpin(channelID, messageID string) (err error)
	ChannelMessagesPinned(channelID string) (st []*discordgo.Message, err error)
	ChannelFileSend(channelID, name string, r io.Reader) (*discordgo.Message, error)
	ChannelFileSendWithMessage(channelID, content string, name string, r io.Reader) (*discordgo.Message, error)
	ChannelInvites(channelID string) (st []*discordgo.Invite, err error)
	ChannelInviteCreate(channelID string, i discordgo.Invite) (st *discordgo.Invite, err error)
	ChannelPermissionSet(channelID, targetID string, targetType discordgo.PermissionOverwriteType, allow, deny int64) (err error)
	ChannelPermissionDelete(channelID, targetID string) (err error)
	ChannelMessageCrosspost(channelID, messageID string) (st *discordgo.Message, err error)
	ChannelNewsFollow(channelID, targetID string) (st *discordgo.ChannelFollow, err error)
	Invite(inviteID string) (st *discordgo.Invite, err error)
	InviteWithCounts(inviteID string) (st *discordgo.Invite, err error)
	InviteComplex(inviteID, guildScheduledEventID string, withCounts, withExpiration bool) (st *discordgo.Invite, err error)
	InviteDelete(inviteID string) (st *discordgo.Invite, err error)
	InviteAccept(inviteID string) (st *discordgo.Invite, err error)
	VoiceRegions() (st []*discordgo.VoiceRegion, err error)
	Gateway() (gateway string, err error)
	GatewayBot() (st *discordgo.GatewayBotResponse, err error)
	WebhookCreate(channelID, name, avatar string) (st *discordgo.Webhook, err error)
	ChannelWebhooks(channelID string) (st []*discordgo.Webhook, err error)
	GuildWebhooks(guildID string) (st []*discordgo.Webhook, err error)
	Webhook(webhookID string) (st *discordgo.Webhook, err error)
	WebhookWithToken(webhookID, token string) (st *discordgo.Webhook, err error)
	WebhookEdit(webhookID, name, avatar, channelID string) (st *discordgo.Role, err error)
	WebhookEditWithToken(webhookID, token, name, avatar string) (st *discordgo.Role, err error)
	WebhookDelete(webhookID string) (err error)
	WebhookDeleteWithToken(webhookID, token string) (st *discordgo.Webhook, err error)
	WebhookExecute(webhookID, token string, wait bool, data *discordgo.WebhookParams) (st *discordgo.Message, err error)
	WebhookThreadExecute(webhookID, token string, wait bool, threadID string, data *discordgo.WebhookParams) (st *discordgo.Message, err error)
	WebhookMessage(webhookID, token, messageID string) (message *discordgo.Message, err error)
	WebhookMessageEdit(webhookID, token, messageID string, data *discordgo.WebhookEdit) (st *discordgo.Message, err error)
	WebhookMessageDelete(webhookID, token, messageID string) (err error)
	MessageReactionAdd(channelID, messageID, emojiID string) error
	MessageReactionRemove(channelID, messageID, emojiID, userID string) error
	MessageReactionsRemoveAll(channelID, messageID string) error
	MessageReactionsRemoveEmoji(channelID, messageID, emojiID string) error
	MessageReactions(channelID, messageID, emojiID string, limit int, beforeID, afterID string) (st []*discordgo.User, err error)
	MessageThreadStartComplex(channelID, messageID string, data *discordgo.ThreadStart) (ch *discordgo.Channel, err error)
	MessageThreadStart(channelID, messageID string, name string, archiveDuration int) (ch *discordgo.Channel, err error)
	ThreadStartComplex(channelID string, data *discordgo.ThreadStart) (ch *discordgo.Channel, err error)
	ThreadStart(channelID, name string, typ discordgo.ChannelType, archiveDuration int) (ch *discordgo.Channel, err error)
	ThreadJoin(id string) error
	ThreadLeave(id string) error
	ThreadMemberAdd(threadID, memberID string) error
	ThreadMemberRemove(threadID, memberID string) error
	ThreadMember(threadID, memberID string) (member *discordgo.ThreadMember, err error)
	ThreadMembers(threadID string) (members []*discordgo.ThreadMember, err error)
	ThreadsActive(channelID string) (threads *discordgo.ThreadsList, err error)
	GuildThreadsActive(guildID string) (threads *discordgo.ThreadsList, err error)
	ThreadsArchived(channelID string, before *time.Time, limit int) (threads *discordgo.ThreadsList, err error)
	ThreadsPrivateArchived(channelID string, before *time.Time, limit int) (threads *discordgo.ThreadsList, err error)
	ThreadsPrivateJoinedArchived(channelID string, before *time.Time, limit int) (threads *discordgo.ThreadsList, err error)
	ApplicationCommandCreate(appID string, guildID string, cmd *discordgo.ApplicationCommand) (ccmd *discordgo.ApplicationCommand, err error)
	ApplicationCommandEdit(appID, guildID, cmdID string, cmd *discordgo.ApplicationCommand) (updated *discordgo.ApplicationCommand, err error)
	ApplicationCommandBulkOverwrite(appID string, guildID string, commands []*discordgo.ApplicationCommand) (createdCommands []*discordgo.ApplicationCommand, err error)
	ApplicationCommandDelete(appID, guildID, cmdID string) error
	ApplicationCommand(appID, guildID, cmdID string) (cmd *discordgo.ApplicationCommand, err error)
	ApplicationCommands(appID, guildID string) (cmd []*discordgo.ApplicationCommand, err error)
	GuildApplicationCommandsPermissions(appID, guildID string) (permissions []*discordgo.GuildApplicationCommandPermissions, err error)
	ApplicationCommandPermissions(appID, guildID, cmdID string) (permissions *discordgo.GuildApplicationCommandPermissions, err error)
	ApplicationCommandPermissionsEdit(appID, guildID, cmdID string, permissions *discordgo.ApplicationCommandPermissionsList) (err error)
	ApplicationCommandPermissionsBatchEdit(appID, guildID string, permissions []*discordgo.GuildApplicationCommandPermissions) (err error)
	InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse) error
	InteractionResponse(interaction *discordgo.Interaction) (*discordgo.Message, error)
	InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit) (*discordgo.Message, error)
	InteractionResponseDelete(interaction *discordgo.Interaction) error
	FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams) (*discordgo.Message, error)
	FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit) (*discordgo.Message, error)
	FollowupMessageDelete(interaction *discordgo.Interaction, messageID string) error
	StageInstanceCreate(data *discordgo.StageInstanceParams) (si *discordgo.StageInstance, err error)
	StageInstance(channelID string) (si *discordgo.StageInstance, err error)
	StageInstanceEdit(channelID string, data *discordgo.StageInstanceParams) (si *discordgo.StageInstance, err error)
	StageInstanceDelete(channelID string) (err error)
	GuildScheduledEvents(guildID string, userCount bool) (st []*discordgo.GuildScheduledEvent, err error)
	GuildScheduledEvent(guildID, eventID string, userCount bool) (st *discordgo.GuildScheduledEvent, err error)
	GuildScheduledEventCreate(guildID string, event *discordgo.GuildScheduledEventParams) (st *discordgo.GuildScheduledEvent, err error)
	GuildScheduledEventEdit(guildID, eventID string, event *discordgo.GuildScheduledEventParams) (st *discordgo.GuildScheduledEvent, err error)
	GuildScheduledEventDelete(guildID, eventID string) (err error)
	GuildScheduledEventUsers(guildID, eventID string, limit int, withMember bool, beforeID, afterID string) (st []*discordgo.GuildScheduledEventUser, err error)
	AutoModerationRules(guildID string) (st []*discordgo.AutoModerationRule, err error)
	AutoModerationRule(guildID, ruleID string) (st *discordgo.AutoModerationRule, err error)
	AutoModerationRuleCreate(guildID string, rule *discordgo.AutoModerationRule) (st *discordgo.AutoModerationRule, err error)
	AutoModerationRuleEdit(guildID, ruleID string, rule *discordgo.AutoModerationRule) (st *discordgo.AutoModerationRule, err error)
	AutoModerationRuleDelete(guildID, ruleID string) (err error)
}
