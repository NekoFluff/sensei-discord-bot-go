// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

// Package discord is a generated GoMock package.
package discord

import (
	image "image"
	io "io"
	reflect "reflect"
	time "time"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// ApplicationCommand mocks base method.
func (m *MockSession) ApplicationCommand(appID, guildID, cmdID string) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommand", appID, guildID, cmdID)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommand indicates an expected call of ApplicationCommand.
func (mr *MockSessionMockRecorder) ApplicationCommand(appID, guildID, cmdID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommand", reflect.TypeOf((*MockSession)(nil).ApplicationCommand), appID, guildID, cmdID)
}

// ApplicationCommandBulkOverwrite mocks base method.
func (m *MockSession) ApplicationCommandBulkOverwrite(appID, guildID string, commands []*discordgo.ApplicationCommand) ([]*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandBulkOverwrite", appID, guildID, commands)
	ret0, _ := ret[0].([]*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandBulkOverwrite indicates an expected call of ApplicationCommandBulkOverwrite.
func (mr *MockSessionMockRecorder) ApplicationCommandBulkOverwrite(appID, guildID, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandBulkOverwrite", reflect.TypeOf((*MockSession)(nil).ApplicationCommandBulkOverwrite), appID, guildID, commands)
}

// ApplicationCommandCreate mocks base method.
func (m *MockSession) ApplicationCommandCreate(appID, guildID string, cmd *discordgo.ApplicationCommand) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandCreate", appID, guildID, cmd)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandCreate indicates an expected call of ApplicationCommandCreate.
func (mr *MockSessionMockRecorder) ApplicationCommandCreate(appID, guildID, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandCreate", reflect.TypeOf((*MockSession)(nil).ApplicationCommandCreate), appID, guildID, cmd)
}

// ApplicationCommandDelete mocks base method.
func (m *MockSession) ApplicationCommandDelete(appID, guildID, cmdID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandDelete", appID, guildID, cmdID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandDelete indicates an expected call of ApplicationCommandDelete.
func (mr *MockSessionMockRecorder) ApplicationCommandDelete(appID, guildID, cmdID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandDelete", reflect.TypeOf((*MockSession)(nil).ApplicationCommandDelete), appID, guildID, cmdID)
}

// ApplicationCommandEdit mocks base method.
func (m *MockSession) ApplicationCommandEdit(appID, guildID, cmdID string, cmd *discordgo.ApplicationCommand) (*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandEdit", appID, guildID, cmdID, cmd)
	ret0, _ := ret[0].(*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandEdit indicates an expected call of ApplicationCommandEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandEdit(appID, guildID, cmdID, cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandEdit), appID, guildID, cmdID, cmd)
}

// ApplicationCommandPermissions mocks base method.
func (m *MockSession) ApplicationCommandPermissions(appID, guildID, cmdID string) (*discordgo.GuildApplicationCommandPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandPermissions", appID, guildID, cmdID)
	ret0, _ := ret[0].(*discordgo.GuildApplicationCommandPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommandPermissions indicates an expected call of ApplicationCommandPermissions.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissions(appID, guildID, cmdID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissions", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissions), appID, guildID, cmdID)
}

// ApplicationCommandPermissionsBatchEdit mocks base method.
func (m *MockSession) ApplicationCommandPermissionsBatchEdit(appID, guildID string, permissions []*discordgo.GuildApplicationCommandPermissions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandPermissionsBatchEdit", appID, guildID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandPermissionsBatchEdit indicates an expected call of ApplicationCommandPermissionsBatchEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissionsBatchEdit(appID, guildID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissionsBatchEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissionsBatchEdit), appID, guildID, permissions)
}

// ApplicationCommandPermissionsEdit mocks base method.
func (m *MockSession) ApplicationCommandPermissionsEdit(appID, guildID, cmdID string, permissions *discordgo.ApplicationCommandPermissionsList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommandPermissionsEdit", appID, guildID, cmdID, permissions)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplicationCommandPermissionsEdit indicates an expected call of ApplicationCommandPermissionsEdit.
func (mr *MockSessionMockRecorder) ApplicationCommandPermissionsEdit(appID, guildID, cmdID, permissions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommandPermissionsEdit", reflect.TypeOf((*MockSession)(nil).ApplicationCommandPermissionsEdit), appID, guildID, cmdID, permissions)
}

// ApplicationCommands mocks base method.
func (m *MockSession) ApplicationCommands(appID, guildID string) ([]*discordgo.ApplicationCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationCommands", appID, guildID)
	ret0, _ := ret[0].([]*discordgo.ApplicationCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationCommands indicates an expected call of ApplicationCommands.
func (mr *MockSessionMockRecorder) ApplicationCommands(appID, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationCommands", reflect.TypeOf((*MockSession)(nil).ApplicationCommands), appID, guildID)
}

// AutoModerationRule mocks base method.
func (m *MockSession) AutoModerationRule(guildID, ruleID string) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoModerationRule", guildID, ruleID)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRule indicates an expected call of AutoModerationRule.
func (mr *MockSessionMockRecorder) AutoModerationRule(guildID, ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRule", reflect.TypeOf((*MockSession)(nil).AutoModerationRule), guildID, ruleID)
}

// AutoModerationRuleCreate mocks base method.
func (m *MockSession) AutoModerationRuleCreate(guildID string, rule *discordgo.AutoModerationRule) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoModerationRuleCreate", guildID, rule)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRuleCreate indicates an expected call of AutoModerationRuleCreate.
func (mr *MockSessionMockRecorder) AutoModerationRuleCreate(guildID, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleCreate", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleCreate), guildID, rule)
}

// AutoModerationRuleDelete mocks base method.
func (m *MockSession) AutoModerationRuleDelete(guildID, ruleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoModerationRuleDelete", guildID, ruleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoModerationRuleDelete indicates an expected call of AutoModerationRuleDelete.
func (mr *MockSessionMockRecorder) AutoModerationRuleDelete(guildID, ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleDelete", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleDelete), guildID, ruleID)
}

// AutoModerationRuleEdit mocks base method.
func (m *MockSession) AutoModerationRuleEdit(guildID, ruleID string, rule *discordgo.AutoModerationRule) (*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoModerationRuleEdit", guildID, ruleID, rule)
	ret0, _ := ret[0].(*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRuleEdit indicates an expected call of AutoModerationRuleEdit.
func (mr *MockSessionMockRecorder) AutoModerationRuleEdit(guildID, ruleID, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRuleEdit", reflect.TypeOf((*MockSession)(nil).AutoModerationRuleEdit), guildID, ruleID, rule)
}

// AutoModerationRules mocks base method.
func (m *MockSession) AutoModerationRules(guildID string) ([]*discordgo.AutoModerationRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoModerationRules", guildID)
	ret0, _ := ret[0].([]*discordgo.AutoModerationRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AutoModerationRules indicates an expected call of AutoModerationRules.
func (mr *MockSessionMockRecorder) AutoModerationRules(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoModerationRules", reflect.TypeOf((*MockSession)(nil).AutoModerationRules), guildID)
}

// Channel mocks base method.
func (m *MockSession) Channel(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockSessionMockRecorder) Channel(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockSession)(nil).Channel), channelID)
}

// ChannelDelete mocks base method.
func (m *MockSession) ChannelDelete(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelDelete", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelDelete indicates an expected call of ChannelDelete.
func (mr *MockSessionMockRecorder) ChannelDelete(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelDelete", reflect.TypeOf((*MockSession)(nil).ChannelDelete), channelID)
}

// ChannelEdit mocks base method.
func (m *MockSession) ChannelEdit(channelID string, data *discordgo.ChannelEdit) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEdit", channelID, data)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelEdit indicates an expected call of ChannelEdit.
func (mr *MockSessionMockRecorder) ChannelEdit(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEdit", reflect.TypeOf((*MockSession)(nil).ChannelEdit), channelID, data)
}

// ChannelEditComplex mocks base method.
func (m *MockSession) ChannelEditComplex(channelID string, data *discordgo.ChannelEdit) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelEditComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelEditComplex indicates an expected call of ChannelEditComplex.
func (mr *MockSessionMockRecorder) ChannelEditComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelEditComplex", reflect.TypeOf((*MockSession)(nil).ChannelEditComplex), channelID, data)
}

// ChannelFileSend mocks base method.
func (m *MockSession) ChannelFileSend(channelID, name string, r io.Reader) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelFileSend", channelID, name, r)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelFileSend indicates an expected call of ChannelFileSend.
func (mr *MockSessionMockRecorder) ChannelFileSend(channelID, name, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelFileSend", reflect.TypeOf((*MockSession)(nil).ChannelFileSend), channelID, name, r)
}

// ChannelFileSendWithMessage mocks base method.
func (m *MockSession) ChannelFileSendWithMessage(channelID, content, name string, r io.Reader) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelFileSendWithMessage", channelID, content, name, r)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelFileSendWithMessage indicates an expected call of ChannelFileSendWithMessage.
func (mr *MockSessionMockRecorder) ChannelFileSendWithMessage(channelID, content, name, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelFileSendWithMessage", reflect.TypeOf((*MockSession)(nil).ChannelFileSendWithMessage), channelID, content, name, r)
}

// ChannelInviteCreate mocks base method.
func (m *MockSession) ChannelInviteCreate(channelID string, i discordgo.Invite) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelInviteCreate", channelID, i)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelInviteCreate indicates an expected call of ChannelInviteCreate.
func (mr *MockSessionMockRecorder) ChannelInviteCreate(channelID, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelInviteCreate", reflect.TypeOf((*MockSession)(nil).ChannelInviteCreate), channelID, i)
}

// ChannelInvites mocks base method.
func (m *MockSession) ChannelInvites(channelID string) ([]*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelInvites", channelID)
	ret0, _ := ret[0].([]*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelInvites indicates an expected call of ChannelInvites.
func (mr *MockSessionMockRecorder) ChannelInvites(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelInvites", reflect.TypeOf((*MockSession)(nil).ChannelInvites), channelID)
}

// ChannelMessage mocks base method.
func (m *MockSession) ChannelMessage(channelID, messageID string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessage", channelID, messageID)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessage indicates an expected call of ChannelMessage.
func (mr *MockSessionMockRecorder) ChannelMessage(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessage", reflect.TypeOf((*MockSession)(nil).ChannelMessage), channelID, messageID)
}

// ChannelMessageCrosspost mocks base method.
func (m *MockSession) ChannelMessageCrosspost(channelID, messageID string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageCrosspost", channelID, messageID)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageCrosspost indicates an expected call of ChannelMessageCrosspost.
func (mr *MockSessionMockRecorder) ChannelMessageCrosspost(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageCrosspost", reflect.TypeOf((*MockSession)(nil).ChannelMessageCrosspost), channelID, messageID)
}

// ChannelMessageDelete mocks base method.
func (m *MockSession) ChannelMessageDelete(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageDelete", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockSessionMockRecorder) ChannelMessageDelete(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockSession)(nil).ChannelMessageDelete), channelID, messageID)
}

// ChannelMessageEdit mocks base method.
func (m *MockSession) ChannelMessageEdit(channelID, messageID, content string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageEdit", channelID, messageID, content)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEdit indicates an expected call of ChannelMessageEdit.
func (mr *MockSessionMockRecorder) ChannelMessageEdit(channelID, messageID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEdit", reflect.TypeOf((*MockSession)(nil).ChannelMessageEdit), channelID, messageID, content)
}

// ChannelMessageEditComplex mocks base method.
func (m_2 *MockSession) ChannelMessageEditComplex(m *discordgo.MessageEdit) (*discordgo.Message, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "ChannelMessageEditComplex", m)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditComplex indicates an expected call of ChannelMessageEditComplex.
func (mr *MockSessionMockRecorder) ChannelMessageEditComplex(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditComplex), m)
}

// ChannelMessageEditEmbed mocks base method.
func (m *MockSession) ChannelMessageEditEmbed(channelID, messageID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageEditEmbed", channelID, messageID, embed)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditEmbed indicates an expected call of ChannelMessageEditEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageEditEmbed(channelID, messageID, embed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditEmbed), channelID, messageID, embed)
}

// ChannelMessageEditEmbeds mocks base method.
func (m *MockSession) ChannelMessageEditEmbeds(channelID, messageID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageEditEmbeds", channelID, messageID, embeds)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageEditEmbeds indicates an expected call of ChannelMessageEditEmbeds.
func (mr *MockSessionMockRecorder) ChannelMessageEditEmbeds(channelID, messageID, embeds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageEditEmbeds", reflect.TypeOf((*MockSession)(nil).ChannelMessageEditEmbeds), channelID, messageID, embeds)
}

// ChannelMessagePin mocks base method.
func (m *MockSession) ChannelMessagePin(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessagePin", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessagePin indicates an expected call of ChannelMessagePin.
func (mr *MockSessionMockRecorder) ChannelMessagePin(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagePin", reflect.TypeOf((*MockSession)(nil).ChannelMessagePin), channelID, messageID)
}

// ChannelMessageSend mocks base method.
func (m *MockSession) ChannelMessageSend(channelID, content string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSend", channelID, content)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSend indicates an expected call of ChannelMessageSend.
func (mr *MockSessionMockRecorder) ChannelMessageSend(channelID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSend", reflect.TypeOf((*MockSession)(nil).ChannelMessageSend), channelID, content)
}

// ChannelMessageSendComplex mocks base method.
func (m *MockSession) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockSessionMockRecorder) ChannelMessageSendComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendComplex), channelID, data)
}

// ChannelMessageSendEmbed mocks base method.
func (m *MockSession) ChannelMessageSendEmbed(channelID string, embed *discordgo.MessageEmbed) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbed", channelID, embed)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbed indicates an expected call of ChannelMessageSendEmbed.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbed(channelID, embed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbed", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbed), channelID, embed)
}

// ChannelMessageSendEmbedReply mocks base method.
func (m *MockSession) ChannelMessageSendEmbedReply(channelID string, embed *discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbedReply", channelID, embed, reference)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbedReply indicates an expected call of ChannelMessageSendEmbedReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbedReply(channelID, embed, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbedReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbedReply), channelID, embed, reference)
}

// ChannelMessageSendEmbeds mocks base method.
func (m *MockSession) ChannelMessageSendEmbeds(channelID string, embeds []*discordgo.MessageEmbed) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbeds", channelID, embeds)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbeds indicates an expected call of ChannelMessageSendEmbeds.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbeds(channelID, embeds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbeds", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbeds), channelID, embeds)
}

// ChannelMessageSendEmbedsReply mocks base method.
func (m *MockSession) ChannelMessageSendEmbedsReply(channelID string, embeds []*discordgo.MessageEmbed, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendEmbedsReply", channelID, embeds, reference)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendEmbedsReply indicates an expected call of ChannelMessageSendEmbedsReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendEmbedsReply(channelID, embeds, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendEmbedsReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendEmbedsReply), channelID, embeds, reference)
}

// ChannelMessageSendReply mocks base method.
func (m *MockSession) ChannelMessageSendReply(channelID, content string, reference *discordgo.MessageReference) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendReply", channelID, content, reference)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendReply indicates an expected call of ChannelMessageSendReply.
func (mr *MockSessionMockRecorder) ChannelMessageSendReply(channelID, content, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendReply", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendReply), channelID, content, reference)
}

// ChannelMessageSendTTS mocks base method.
func (m *MockSession) ChannelMessageSendTTS(channelID, content string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendTTS", channelID, content)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendTTS indicates an expected call of ChannelMessageSendTTS.
func (mr *MockSessionMockRecorder) ChannelMessageSendTTS(channelID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendTTS", reflect.TypeOf((*MockSession)(nil).ChannelMessageSendTTS), channelID, content)
}

// ChannelMessageUnpin mocks base method.
func (m *MockSession) ChannelMessageUnpin(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageUnpin", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageUnpin indicates an expected call of ChannelMessageUnpin.
func (mr *MockSessionMockRecorder) ChannelMessageUnpin(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageUnpin", reflect.TypeOf((*MockSession)(nil).ChannelMessageUnpin), channelID, messageID)
}

// ChannelMessages mocks base method.
func (m *MockSession) ChannelMessages(channelID string, limit int, beforeID, afterID, aroundID string) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessages", channelID, limit, beforeID, afterID, aroundID)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessages indicates an expected call of ChannelMessages.
func (mr *MockSessionMockRecorder) ChannelMessages(channelID, limit, beforeID, afterID, aroundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessages", reflect.TypeOf((*MockSession)(nil).ChannelMessages), channelID, limit, beforeID, afterID, aroundID)
}

// ChannelMessagesBulkDelete mocks base method.
func (m *MockSession) ChannelMessagesBulkDelete(channelID string, messages []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessagesBulkDelete", channelID, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessagesBulkDelete indicates an expected call of ChannelMessagesBulkDelete.
func (mr *MockSessionMockRecorder) ChannelMessagesBulkDelete(channelID, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagesBulkDelete", reflect.TypeOf((*MockSession)(nil).ChannelMessagesBulkDelete), channelID, messages)
}

// ChannelMessagesPinned mocks base method.
func (m *MockSession) ChannelMessagesPinned(channelID string) ([]*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessagesPinned", channelID)
	ret0, _ := ret[0].([]*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessagesPinned indicates an expected call of ChannelMessagesPinned.
func (mr *MockSessionMockRecorder) ChannelMessagesPinned(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessagesPinned", reflect.TypeOf((*MockSession)(nil).ChannelMessagesPinned), channelID)
}

// ChannelNewsFollow mocks base method.
func (m *MockSession) ChannelNewsFollow(channelID, targetID string) (*discordgo.ChannelFollow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelNewsFollow", channelID, targetID)
	ret0, _ := ret[0].(*discordgo.ChannelFollow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelNewsFollow indicates an expected call of ChannelNewsFollow.
func (mr *MockSessionMockRecorder) ChannelNewsFollow(channelID, targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelNewsFollow", reflect.TypeOf((*MockSession)(nil).ChannelNewsFollow), channelID, targetID)
}

// ChannelPermissionDelete mocks base method.
func (m *MockSession) ChannelPermissionDelete(channelID, targetID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelPermissionDelete", channelID, targetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelPermissionDelete indicates an expected call of ChannelPermissionDelete.
func (mr *MockSessionMockRecorder) ChannelPermissionDelete(channelID, targetID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelPermissionDelete", reflect.TypeOf((*MockSession)(nil).ChannelPermissionDelete), channelID, targetID)
}

// ChannelPermissionSet mocks base method.
func (m *MockSession) ChannelPermissionSet(channelID, targetID string, targetType discordgo.PermissionOverwriteType, allow, deny int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelPermissionSet", channelID, targetID, targetType, allow, deny)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelPermissionSet indicates an expected call of ChannelPermissionSet.
func (mr *MockSessionMockRecorder) ChannelPermissionSet(channelID, targetID, targetType, allow, deny interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelPermissionSet", reflect.TypeOf((*MockSession)(nil).ChannelPermissionSet), channelID, targetID, targetType, allow, deny)
}

// ChannelTyping mocks base method.
func (m *MockSession) ChannelTyping(channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelTyping", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelTyping indicates an expected call of ChannelTyping.
func (mr *MockSessionMockRecorder) ChannelTyping(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelTyping", reflect.TypeOf((*MockSession)(nil).ChannelTyping), channelID)
}

// ChannelWebhooks mocks base method.
func (m *MockSession) ChannelWebhooks(channelID string) ([]*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelWebhooks", channelID)
	ret0, _ := ret[0].([]*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelWebhooks indicates an expected call of ChannelWebhooks.
func (mr *MockSessionMockRecorder) ChannelWebhooks(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelWebhooks", reflect.TypeOf((*MockSession)(nil).ChannelWebhooks), channelID)
}

// FollowupMessageCreate mocks base method.
func (m *MockSession) FollowupMessageCreate(interaction *discordgo.Interaction, wait bool, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowupMessageCreate", interaction, wait, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageCreate indicates an expected call of FollowupMessageCreate.
func (mr *MockSessionMockRecorder) FollowupMessageCreate(interaction, wait, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageCreate", reflect.TypeOf((*MockSession)(nil).FollowupMessageCreate), interaction, wait, data)
}

// FollowupMessageDelete mocks base method.
func (m *MockSession) FollowupMessageDelete(interaction *discordgo.Interaction, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowupMessageDelete", interaction, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FollowupMessageDelete indicates an expected call of FollowupMessageDelete.
func (mr *MockSessionMockRecorder) FollowupMessageDelete(interaction, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageDelete", reflect.TypeOf((*MockSession)(nil).FollowupMessageDelete), interaction, messageID)
}

// FollowupMessageEdit mocks base method.
func (m *MockSession) FollowupMessageEdit(interaction *discordgo.Interaction, messageID string, data *discordgo.WebhookEdit) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FollowupMessageEdit", interaction, messageID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FollowupMessageEdit indicates an expected call of FollowupMessageEdit.
func (mr *MockSessionMockRecorder) FollowupMessageEdit(interaction, messageID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FollowupMessageEdit", reflect.TypeOf((*MockSession)(nil).FollowupMessageEdit), interaction, messageID, data)
}

// Gateway mocks base method.
func (m *MockSession) Gateway() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gateway")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gateway indicates an expected call of Gateway.
func (mr *MockSessionMockRecorder) Gateway() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gateway", reflect.TypeOf((*MockSession)(nil).Gateway))
}

// GatewayBot mocks base method.
func (m *MockSession) GatewayBot() (*discordgo.GatewayBotResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GatewayBot")
	ret0, _ := ret[0].(*discordgo.GatewayBotResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GatewayBot indicates an expected call of GatewayBot.
func (mr *MockSessionMockRecorder) GatewayBot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GatewayBot", reflect.TypeOf((*MockSession)(nil).GatewayBot))
}

// Guild mocks base method.
func (m *MockSession) Guild(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Guild", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Guild indicates an expected call of Guild.
func (mr *MockSessionMockRecorder) Guild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Guild", reflect.TypeOf((*MockSession)(nil).Guild), guildID)
}

// GuildApplicationCommandsPermissions mocks base method.
func (m *MockSession) GuildApplicationCommandsPermissions(appID, guildID string) ([]*discordgo.GuildApplicationCommandPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildApplicationCommandsPermissions", appID, guildID)
	ret0, _ := ret[0].([]*discordgo.GuildApplicationCommandPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildApplicationCommandsPermissions indicates an expected call of GuildApplicationCommandsPermissions.
func (mr *MockSessionMockRecorder) GuildApplicationCommandsPermissions(appID, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildApplicationCommandsPermissions", reflect.TypeOf((*MockSession)(nil).GuildApplicationCommandsPermissions), appID, guildID)
}

// GuildAuditLog mocks base method.
func (m *MockSession) GuildAuditLog(guildID, userID, beforeID string, actionType, limit int) (*discordgo.GuildAuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildAuditLog", guildID, userID, beforeID, actionType, limit)
	ret0, _ := ret[0].(*discordgo.GuildAuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildAuditLog indicates an expected call of GuildAuditLog.
func (mr *MockSessionMockRecorder) GuildAuditLog(guildID, userID, beforeID, actionType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildAuditLog", reflect.TypeOf((*MockSession)(nil).GuildAuditLog), guildID, userID, beforeID, actionType, limit)
}

// GuildBan mocks base method.
func (m *MockSession) GuildBan(guildID, userID string) (*discordgo.GuildBan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildBan", guildID, userID)
	ret0, _ := ret[0].(*discordgo.GuildBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildBan indicates an expected call of GuildBan.
func (mr *MockSessionMockRecorder) GuildBan(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBan", reflect.TypeOf((*MockSession)(nil).GuildBan), guildID, userID)
}

// GuildBanCreate mocks base method.
func (m *MockSession) GuildBanCreate(guildID, userID string, days int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildBanCreate", guildID, userID, days)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanCreate indicates an expected call of GuildBanCreate.
func (mr *MockSessionMockRecorder) GuildBanCreate(guildID, userID, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanCreate", reflect.TypeOf((*MockSession)(nil).GuildBanCreate), guildID, userID, days)
}

// GuildBanCreateWithReason mocks base method.
func (m *MockSession) GuildBanCreateWithReason(guildID, userID, reason string, days int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildBanCreateWithReason", guildID, userID, reason, days)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanCreateWithReason indicates an expected call of GuildBanCreateWithReason.
func (mr *MockSessionMockRecorder) GuildBanCreateWithReason(guildID, userID, reason, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanCreateWithReason", reflect.TypeOf((*MockSession)(nil).GuildBanCreateWithReason), guildID, userID, reason, days)
}

// GuildBanDelete mocks base method.
func (m *MockSession) GuildBanDelete(guildID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildBanDelete", guildID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildBanDelete indicates an expected call of GuildBanDelete.
func (mr *MockSessionMockRecorder) GuildBanDelete(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBanDelete", reflect.TypeOf((*MockSession)(nil).GuildBanDelete), guildID, userID)
}

// GuildBans mocks base method.
func (m *MockSession) GuildBans(guildID string, limit int, beforeID, afterID string) ([]*discordgo.GuildBan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildBans", guildID, limit, beforeID, afterID)
	ret0, _ := ret[0].([]*discordgo.GuildBan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildBans indicates an expected call of GuildBans.
func (mr *MockSessionMockRecorder) GuildBans(guildID, limit, beforeID, afterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildBans", reflect.TypeOf((*MockSession)(nil).GuildBans), guildID, limit, beforeID, afterID)
}

// GuildChannelCreate mocks base method.
func (m *MockSession) GuildChannelCreate(guildID, name string, ctype discordgo.ChannelType) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildChannelCreate", guildID, name, ctype)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelCreate indicates an expected call of GuildChannelCreate.
func (mr *MockSessionMockRecorder) GuildChannelCreate(guildID, name, ctype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreate", reflect.TypeOf((*MockSession)(nil).GuildChannelCreate), guildID, name, ctype)
}

// GuildChannelCreateComplex mocks base method.
func (m *MockSession) GuildChannelCreateComplex(guildID string, data discordgo.GuildChannelCreateData) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildChannelCreateComplex", guildID, data)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannelCreateComplex indicates an expected call of GuildChannelCreateComplex.
func (mr *MockSessionMockRecorder) GuildChannelCreateComplex(guildID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelCreateComplex", reflect.TypeOf((*MockSession)(nil).GuildChannelCreateComplex), guildID, data)
}

// GuildChannels mocks base method.
func (m *MockSession) GuildChannels(guildID string) ([]*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildChannels", guildID)
	ret0, _ := ret[0].([]*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildChannels indicates an expected call of GuildChannels.
func (mr *MockSessionMockRecorder) GuildChannels(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannels", reflect.TypeOf((*MockSession)(nil).GuildChannels), guildID)
}

// GuildChannelsReorder mocks base method.
func (m *MockSession) GuildChannelsReorder(guildID string, channels []*discordgo.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildChannelsReorder", guildID, channels)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildChannelsReorder indicates an expected call of GuildChannelsReorder.
func (mr *MockSessionMockRecorder) GuildChannelsReorder(guildID, channels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildChannelsReorder", reflect.TypeOf((*MockSession)(nil).GuildChannelsReorder), guildID, channels)
}

// GuildCreate mocks base method.
func (m *MockSession) GuildCreate(name string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildCreate", name)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildCreate indicates an expected call of GuildCreate.
func (mr *MockSessionMockRecorder) GuildCreate(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildCreate", reflect.TypeOf((*MockSession)(nil).GuildCreate), name)
}

// GuildCreateWithTemplate mocks base method.
func (m *MockSession) GuildCreateWithTemplate(templateCode, name, icon string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildCreateWithTemplate", templateCode, name, icon)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildCreateWithTemplate indicates an expected call of GuildCreateWithTemplate.
func (mr *MockSessionMockRecorder) GuildCreateWithTemplate(templateCode, name, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildCreateWithTemplate", reflect.TypeOf((*MockSession)(nil).GuildCreateWithTemplate), templateCode, name, icon)
}

// GuildDelete mocks base method.
func (m *MockSession) GuildDelete(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildDelete", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildDelete indicates an expected call of GuildDelete.
func (mr *MockSessionMockRecorder) GuildDelete(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildDelete", reflect.TypeOf((*MockSession)(nil).GuildDelete), guildID)
}

// GuildEdit mocks base method.
func (m *MockSession) GuildEdit(guildID string, g *discordgo.GuildParams) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEdit", guildID, g)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEdit indicates an expected call of GuildEdit.
func (mr *MockSessionMockRecorder) GuildEdit(guildID, g interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEdit", reflect.TypeOf((*MockSession)(nil).GuildEdit), guildID, g)
}

// GuildEmbed mocks base method.
func (m *MockSession) GuildEmbed(guildID string) (*discordgo.GuildEmbed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmbed", guildID)
	ret0, _ := ret[0].(*discordgo.GuildEmbed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmbed indicates an expected call of GuildEmbed.
func (mr *MockSessionMockRecorder) GuildEmbed(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmbed", reflect.TypeOf((*MockSession)(nil).GuildEmbed), guildID)
}

// GuildEmbedEdit mocks base method.
func (m *MockSession) GuildEmbedEdit(guildID string, data *discordgo.GuildEmbed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmbedEdit", guildID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildEmbedEdit indicates an expected call of GuildEmbedEdit.
func (mr *MockSessionMockRecorder) GuildEmbedEdit(guildID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmbedEdit", reflect.TypeOf((*MockSession)(nil).GuildEmbedEdit), guildID, data)
}

// GuildEmoji mocks base method.
func (m *MockSession) GuildEmoji(guildID, emojiID string) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmoji", guildID, emojiID)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmoji indicates an expected call of GuildEmoji.
func (mr *MockSessionMockRecorder) GuildEmoji(guildID, emojiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmoji", reflect.TypeOf((*MockSession)(nil).GuildEmoji), guildID, emojiID)
}

// GuildEmojiCreate mocks base method.
func (m *MockSession) GuildEmojiCreate(guildID string, data *discordgo.EmojiParams) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmojiCreate", guildID, data)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojiCreate indicates an expected call of GuildEmojiCreate.
func (mr *MockSessionMockRecorder) GuildEmojiCreate(guildID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiCreate", reflect.TypeOf((*MockSession)(nil).GuildEmojiCreate), guildID, data)
}

// GuildEmojiDelete mocks base method.
func (m *MockSession) GuildEmojiDelete(guildID, emojiID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmojiDelete", guildID, emojiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildEmojiDelete indicates an expected call of GuildEmojiDelete.
func (mr *MockSessionMockRecorder) GuildEmojiDelete(guildID, emojiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiDelete", reflect.TypeOf((*MockSession)(nil).GuildEmojiDelete), guildID, emojiID)
}

// GuildEmojiEdit mocks base method.
func (m *MockSession) GuildEmojiEdit(guildID, emojiID string, data *discordgo.EmojiParams) (*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmojiEdit", guildID, emojiID, data)
	ret0, _ := ret[0].(*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojiEdit indicates an expected call of GuildEmojiEdit.
func (mr *MockSessionMockRecorder) GuildEmojiEdit(guildID, emojiID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojiEdit", reflect.TypeOf((*MockSession)(nil).GuildEmojiEdit), guildID, emojiID, data)
}

// GuildEmojis mocks base method.
func (m *MockSession) GuildEmojis(guildID string) ([]*discordgo.Emoji, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildEmojis", guildID)
	ret0, _ := ret[0].([]*discordgo.Emoji)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildEmojis indicates an expected call of GuildEmojis.
func (mr *MockSessionMockRecorder) GuildEmojis(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildEmojis", reflect.TypeOf((*MockSession)(nil).GuildEmojis), guildID)
}

// GuildIcon mocks base method.
func (m *MockSession) GuildIcon(guildID string) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildIcon", guildID)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildIcon indicates an expected call of GuildIcon.
func (mr *MockSessionMockRecorder) GuildIcon(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIcon", reflect.TypeOf((*MockSession)(nil).GuildIcon), guildID)
}

// GuildIntegrationCreate mocks base method.
func (m *MockSession) GuildIntegrationCreate(guildID, integrationType, integrationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildIntegrationCreate", guildID, integrationType, integrationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationCreate indicates an expected call of GuildIntegrationCreate.
func (mr *MockSessionMockRecorder) GuildIntegrationCreate(guildID, integrationType, integrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationCreate", reflect.TypeOf((*MockSession)(nil).GuildIntegrationCreate), guildID, integrationType, integrationID)
}

// GuildIntegrationDelete mocks base method.
func (m *MockSession) GuildIntegrationDelete(guildID, integrationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildIntegrationDelete", guildID, integrationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationDelete indicates an expected call of GuildIntegrationDelete.
func (mr *MockSessionMockRecorder) GuildIntegrationDelete(guildID, integrationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationDelete", reflect.TypeOf((*MockSession)(nil).GuildIntegrationDelete), guildID, integrationID)
}

// GuildIntegrationEdit mocks base method.
func (m *MockSession) GuildIntegrationEdit(guildID, integrationID string, expireBehavior, expireGracePeriod int, enableEmoticons bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildIntegrationEdit", guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildIntegrationEdit indicates an expected call of GuildIntegrationEdit.
func (mr *MockSessionMockRecorder) GuildIntegrationEdit(guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrationEdit", reflect.TypeOf((*MockSession)(nil).GuildIntegrationEdit), guildID, integrationID, expireBehavior, expireGracePeriod, enableEmoticons)
}

// GuildIntegrations mocks base method.
func (m *MockSession) GuildIntegrations(guildID string) ([]*discordgo.Integration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildIntegrations", guildID)
	ret0, _ := ret[0].([]*discordgo.Integration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildIntegrations indicates an expected call of GuildIntegrations.
func (mr *MockSessionMockRecorder) GuildIntegrations(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildIntegrations", reflect.TypeOf((*MockSession)(nil).GuildIntegrations), guildID)
}

// GuildInvites mocks base method.
func (m *MockSession) GuildInvites(guildID string) ([]*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildInvites", guildID)
	ret0, _ := ret[0].([]*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildInvites indicates an expected call of GuildInvites.
func (mr *MockSessionMockRecorder) GuildInvites(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildInvites", reflect.TypeOf((*MockSession)(nil).GuildInvites), guildID)
}

// GuildLeave mocks base method.
func (m *MockSession) GuildLeave(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildLeave", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildLeave indicates an expected call of GuildLeave.
func (mr *MockSessionMockRecorder) GuildLeave(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildLeave", reflect.TypeOf((*MockSession)(nil).GuildLeave), guildID)
}

// GuildMember mocks base method.
func (m *MockSession) GuildMember(guildID, userID string) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMember", guildID, userID)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMember indicates an expected call of GuildMember.
func (mr *MockSessionMockRecorder) GuildMember(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMember", reflect.TypeOf((*MockSession)(nil).GuildMember), guildID, userID)
}

// GuildMemberAdd mocks base method.
func (m *MockSession) GuildMemberAdd(guildID, userID string, data *discordgo.GuildMemberAddParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberAdd", guildID, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberAdd indicates an expected call of GuildMemberAdd.
func (mr *MockSessionMockRecorder) GuildMemberAdd(guildID, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberAdd", reflect.TypeOf((*MockSession)(nil).GuildMemberAdd), guildID, userID, data)
}

// GuildMemberDeafen mocks base method.
func (m *MockSession) GuildMemberDeafen(guildID, userID string, deaf bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberDeafen", guildID, userID, deaf)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDeafen indicates an expected call of GuildMemberDeafen.
func (mr *MockSessionMockRecorder) GuildMemberDeafen(guildID, userID, deaf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDeafen", reflect.TypeOf((*MockSession)(nil).GuildMemberDeafen), guildID, userID, deaf)
}

// GuildMemberDelete mocks base method.
func (m *MockSession) GuildMemberDelete(guildID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberDelete", guildID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDelete indicates an expected call of GuildMemberDelete.
func (mr *MockSessionMockRecorder) GuildMemberDelete(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDelete", reflect.TypeOf((*MockSession)(nil).GuildMemberDelete), guildID, userID)
}

// GuildMemberDeleteWithReason mocks base method.
func (m *MockSession) GuildMemberDeleteWithReason(guildID, userID, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberDeleteWithReason", guildID, userID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberDeleteWithReason indicates an expected call of GuildMemberDeleteWithReason.
func (mr *MockSessionMockRecorder) GuildMemberDeleteWithReason(guildID, userID, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberDeleteWithReason", reflect.TypeOf((*MockSession)(nil).GuildMemberDeleteWithReason), guildID, userID, reason)
}

// GuildMemberEdit mocks base method.
func (m *MockSession) GuildMemberEdit(guildID, userID string, data *discordgo.GuildMemberParams) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberEdit", guildID, userID, data)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMemberEdit indicates an expected call of GuildMemberEdit.
func (mr *MockSessionMockRecorder) GuildMemberEdit(guildID, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberEdit", reflect.TypeOf((*MockSession)(nil).GuildMemberEdit), guildID, userID, data)
}

// GuildMemberEditComplex mocks base method.
func (m *MockSession) GuildMemberEditComplex(guildID, userID string, data *discordgo.GuildMemberParams) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberEditComplex", guildID, userID, data)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMemberEditComplex indicates an expected call of GuildMemberEditComplex.
func (mr *MockSessionMockRecorder) GuildMemberEditComplex(guildID, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberEditComplex", reflect.TypeOf((*MockSession)(nil).GuildMemberEditComplex), guildID, userID, data)
}

// GuildMemberMove mocks base method.
func (m *MockSession) GuildMemberMove(guildID, userID string, channelID *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberMove", guildID, userID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberMove indicates an expected call of GuildMemberMove.
func (mr *MockSessionMockRecorder) GuildMemberMove(guildID, userID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberMove", reflect.TypeOf((*MockSession)(nil).GuildMemberMove), guildID, userID, channelID)
}

// GuildMemberMute mocks base method.
func (m *MockSession) GuildMemberMute(guildID, userID string, mute bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberMute", guildID, userID, mute)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberMute indicates an expected call of GuildMemberMute.
func (mr *MockSessionMockRecorder) GuildMemberMute(guildID, userID, mute interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberMute", reflect.TypeOf((*MockSession)(nil).GuildMemberMute), guildID, userID, mute)
}

// GuildMemberNickname mocks base method.
func (m *MockSession) GuildMemberNickname(guildID, userID, nickname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberNickname", guildID, userID, nickname)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberNickname indicates an expected call of GuildMemberNickname.
func (mr *MockSessionMockRecorder) GuildMemberNickname(guildID, userID, nickname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberNickname", reflect.TypeOf((*MockSession)(nil).GuildMemberNickname), guildID, userID, nickname)
}

// GuildMemberRoleAdd mocks base method.
func (m *MockSession) GuildMemberRoleAdd(guildID, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberRoleAdd", guildID, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleAdd indicates an expected call of GuildMemberRoleAdd.
func (mr *MockSessionMockRecorder) GuildMemberRoleAdd(guildID, userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleAdd", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleAdd), guildID, userID, roleID)
}

// GuildMemberRoleRemove mocks base method.
func (m *MockSession) GuildMemberRoleRemove(guildID, userID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberRoleRemove", guildID, userID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberRoleRemove indicates an expected call of GuildMemberRoleRemove.
func (mr *MockSessionMockRecorder) GuildMemberRoleRemove(guildID, userID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberRoleRemove", reflect.TypeOf((*MockSession)(nil).GuildMemberRoleRemove), guildID, userID, roleID)
}

// GuildMemberTimeout mocks base method.
func (m *MockSession) GuildMemberTimeout(guildID, userID string, until *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMemberTimeout", guildID, userID, until)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildMemberTimeout indicates an expected call of GuildMemberTimeout.
func (mr *MockSessionMockRecorder) GuildMemberTimeout(guildID, userID, until interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMemberTimeout", reflect.TypeOf((*MockSession)(nil).GuildMemberTimeout), guildID, userID, until)
}

// GuildMembers mocks base method.
func (m *MockSession) GuildMembers(guildID, after string, limit int) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMembers", guildID, after, limit)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMembers indicates an expected call of GuildMembers.
func (mr *MockSessionMockRecorder) GuildMembers(guildID, after, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMembers", reflect.TypeOf((*MockSession)(nil).GuildMembers), guildID, after, limit)
}

// GuildMembersSearch mocks base method.
func (m *MockSession) GuildMembersSearch(guildID, query string, limit int) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildMembersSearch", guildID, query, limit)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildMembersSearch indicates an expected call of GuildMembersSearch.
func (mr *MockSessionMockRecorder) GuildMembersSearch(guildID, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildMembersSearch", reflect.TypeOf((*MockSession)(nil).GuildMembersSearch), guildID, query, limit)
}

// GuildPreview mocks base method.
func (m *MockSession) GuildPreview(guildID string) (*discordgo.GuildPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildPreview", guildID)
	ret0, _ := ret[0].(*discordgo.GuildPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPreview indicates an expected call of GuildPreview.
func (mr *MockSessionMockRecorder) GuildPreview(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPreview", reflect.TypeOf((*MockSession)(nil).GuildPreview), guildID)
}

// GuildPrune mocks base method.
func (m *MockSession) GuildPrune(guildID string, days uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildPrune", guildID, days)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPrune indicates an expected call of GuildPrune.
func (mr *MockSessionMockRecorder) GuildPrune(guildID, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPrune", reflect.TypeOf((*MockSession)(nil).GuildPrune), guildID, days)
}

// GuildPruneCount mocks base method.
func (m *MockSession) GuildPruneCount(guildID string, days uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildPruneCount", guildID, days)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildPruneCount indicates an expected call of GuildPruneCount.
func (mr *MockSessionMockRecorder) GuildPruneCount(guildID, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildPruneCount", reflect.TypeOf((*MockSession)(nil).GuildPruneCount), guildID, days)
}

// GuildRoleCreate mocks base method.
func (m *MockSession) GuildRoleCreate(guildID string, data *discordgo.RoleParams) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildRoleCreate", guildID, data)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleCreate indicates an expected call of GuildRoleCreate.
func (mr *MockSessionMockRecorder) GuildRoleCreate(guildID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleCreate", reflect.TypeOf((*MockSession)(nil).GuildRoleCreate), guildID, data)
}

// GuildRoleDelete mocks base method.
func (m *MockSession) GuildRoleDelete(guildID, roleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildRoleDelete", guildID, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildRoleDelete indicates an expected call of GuildRoleDelete.
func (mr *MockSessionMockRecorder) GuildRoleDelete(guildID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleDelete", reflect.TypeOf((*MockSession)(nil).GuildRoleDelete), guildID, roleID)
}

// GuildRoleEdit mocks base method.
func (m *MockSession) GuildRoleEdit(guildID, roleID string, data *discordgo.RoleParams) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildRoleEdit", guildID, roleID, data)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleEdit indicates an expected call of GuildRoleEdit.
func (mr *MockSessionMockRecorder) GuildRoleEdit(guildID, roleID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleEdit", reflect.TypeOf((*MockSession)(nil).GuildRoleEdit), guildID, roleID, data)
}

// GuildRoleReorder mocks base method.
func (m *MockSession) GuildRoleReorder(guildID string, roles []*discordgo.Role) ([]*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildRoleReorder", guildID, roles)
	ret0, _ := ret[0].([]*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoleReorder indicates an expected call of GuildRoleReorder.
func (mr *MockSessionMockRecorder) GuildRoleReorder(guildID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoleReorder", reflect.TypeOf((*MockSession)(nil).GuildRoleReorder), guildID, roles)
}

// GuildRoles mocks base method.
func (m *MockSession) GuildRoles(guildID string) ([]*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildRoles", guildID)
	ret0, _ := ret[0].([]*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildRoles indicates an expected call of GuildRoles.
func (mr *MockSessionMockRecorder) GuildRoles(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildRoles", reflect.TypeOf((*MockSession)(nil).GuildRoles), guildID)
}

// GuildScheduledEvent mocks base method.
func (m *MockSession) GuildScheduledEvent(guildID, eventID string, userCount bool) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEvent", guildID, eventID, userCount)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEvent indicates an expected call of GuildScheduledEvent.
func (mr *MockSessionMockRecorder) GuildScheduledEvent(guildID, eventID, userCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEvent", reflect.TypeOf((*MockSession)(nil).GuildScheduledEvent), guildID, eventID, userCount)
}

// GuildScheduledEventCreate mocks base method.
func (m *MockSession) GuildScheduledEventCreate(guildID string, event *discordgo.GuildScheduledEventParams) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEventCreate", guildID, event)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventCreate indicates an expected call of GuildScheduledEventCreate.
func (mr *MockSessionMockRecorder) GuildScheduledEventCreate(guildID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventCreate", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventCreate), guildID, event)
}

// GuildScheduledEventDelete mocks base method.
func (m *MockSession) GuildScheduledEventDelete(guildID, eventID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEventDelete", guildID, eventID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildScheduledEventDelete indicates an expected call of GuildScheduledEventDelete.
func (mr *MockSessionMockRecorder) GuildScheduledEventDelete(guildID, eventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventDelete", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventDelete), guildID, eventID)
}

// GuildScheduledEventEdit mocks base method.
func (m *MockSession) GuildScheduledEventEdit(guildID, eventID string, event *discordgo.GuildScheduledEventParams) (*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEventEdit", guildID, eventID, event)
	ret0, _ := ret[0].(*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventEdit indicates an expected call of GuildScheduledEventEdit.
func (mr *MockSessionMockRecorder) GuildScheduledEventEdit(guildID, eventID, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventEdit", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventEdit), guildID, eventID, event)
}

// GuildScheduledEventUsers mocks base method.
func (m *MockSession) GuildScheduledEventUsers(guildID, eventID string, limit int, withMember bool, beforeID, afterID string) ([]*discordgo.GuildScheduledEventUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEventUsers", guildID, eventID, limit, withMember, beforeID, afterID)
	ret0, _ := ret[0].([]*discordgo.GuildScheduledEventUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEventUsers indicates an expected call of GuildScheduledEventUsers.
func (mr *MockSessionMockRecorder) GuildScheduledEventUsers(guildID, eventID, limit, withMember, beforeID, afterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEventUsers", reflect.TypeOf((*MockSession)(nil).GuildScheduledEventUsers), guildID, eventID, limit, withMember, beforeID, afterID)
}

// GuildScheduledEvents mocks base method.
func (m *MockSession) GuildScheduledEvents(guildID string, userCount bool) ([]*discordgo.GuildScheduledEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildScheduledEvents", guildID, userCount)
	ret0, _ := ret[0].([]*discordgo.GuildScheduledEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildScheduledEvents indicates an expected call of GuildScheduledEvents.
func (mr *MockSessionMockRecorder) GuildScheduledEvents(guildID, userCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildScheduledEvents", reflect.TypeOf((*MockSession)(nil).GuildScheduledEvents), guildID, userCount)
}

// GuildSplash mocks base method.
func (m *MockSession) GuildSplash(guildID string) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildSplash", guildID)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildSplash indicates an expected call of GuildSplash.
func (mr *MockSessionMockRecorder) GuildSplash(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildSplash", reflect.TypeOf((*MockSession)(nil).GuildSplash), guildID)
}

// GuildTemplate mocks base method.
func (m *MockSession) GuildTemplate(templateCode string) (*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplate", templateCode)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplate indicates an expected call of GuildTemplate.
func (mr *MockSessionMockRecorder) GuildTemplate(templateCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplate", reflect.TypeOf((*MockSession)(nil).GuildTemplate), templateCode)
}

// GuildTemplateCreate mocks base method.
func (m *MockSession) GuildTemplateCreate(guildID string, data *discordgo.GuildTemplateParams) *discordgo.GuildTemplate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplateCreate", guildID, data)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	return ret0
}

// GuildTemplateCreate indicates an expected call of GuildTemplateCreate.
func (mr *MockSessionMockRecorder) GuildTemplateCreate(guildID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateCreate", reflect.TypeOf((*MockSession)(nil).GuildTemplateCreate), guildID, data)
}

// GuildTemplateDelete mocks base method.
func (m *MockSession) GuildTemplateDelete(guildID, templateCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplateDelete", guildID, templateCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildTemplateDelete indicates an expected call of GuildTemplateDelete.
func (mr *MockSessionMockRecorder) GuildTemplateDelete(guildID, templateCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateDelete", reflect.TypeOf((*MockSession)(nil).GuildTemplateDelete), guildID, templateCode)
}

// GuildTemplateEdit mocks base method.
func (m *MockSession) GuildTemplateEdit(guildID, templateCode string, data *discordgo.GuildTemplateParams) (*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplateEdit", guildID, templateCode, data)
	ret0, _ := ret[0].(*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplateEdit indicates an expected call of GuildTemplateEdit.
func (mr *MockSessionMockRecorder) GuildTemplateEdit(guildID, templateCode, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateEdit", reflect.TypeOf((*MockSession)(nil).GuildTemplateEdit), guildID, templateCode, data)
}

// GuildTemplateSync mocks base method.
func (m *MockSession) GuildTemplateSync(guildID, templateCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplateSync", guildID, templateCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// GuildTemplateSync indicates an expected call of GuildTemplateSync.
func (mr *MockSessionMockRecorder) GuildTemplateSync(guildID, templateCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplateSync", reflect.TypeOf((*MockSession)(nil).GuildTemplateSync), guildID, templateCode)
}

// GuildTemplates mocks base method.
func (m *MockSession) GuildTemplates(guildID string) ([]*discordgo.GuildTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildTemplates", guildID)
	ret0, _ := ret[0].([]*discordgo.GuildTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildTemplates indicates an expected call of GuildTemplates.
func (mr *MockSessionMockRecorder) GuildTemplates(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildTemplates", reflect.TypeOf((*MockSession)(nil).GuildTemplates), guildID)
}

// GuildThreadsActive mocks base method.
func (m *MockSession) GuildThreadsActive(guildID string) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildThreadsActive", guildID)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildThreadsActive indicates an expected call of GuildThreadsActive.
func (mr *MockSessionMockRecorder) GuildThreadsActive(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildThreadsActive", reflect.TypeOf((*MockSession)(nil).GuildThreadsActive), guildID)
}

// GuildWebhooks mocks base method.
func (m *MockSession) GuildWebhooks(guildID string) ([]*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildWebhooks", guildID)
	ret0, _ := ret[0].([]*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildWebhooks indicates an expected call of GuildWebhooks.
func (mr *MockSessionMockRecorder) GuildWebhooks(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildWebhooks", reflect.TypeOf((*MockSession)(nil).GuildWebhooks), guildID)
}

// GuildWithCounts mocks base method.
func (m *MockSession) GuildWithCounts(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GuildWithCounts", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GuildWithCounts indicates an expected call of GuildWithCounts.
func (mr *MockSessionMockRecorder) GuildWithCounts(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GuildWithCounts", reflect.TypeOf((*MockSession)(nil).GuildWithCounts), guildID)
}

// InteractionRespond mocks base method.
func (m *MockSession) InteractionRespond(interaction *discordgo.Interaction, resp *discordgo.InteractionResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionRespond", interaction, resp)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionRespond indicates an expected call of InteractionRespond.
func (mr *MockSessionMockRecorder) InteractionRespond(interaction, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionRespond", reflect.TypeOf((*MockSession)(nil).InteractionRespond), interaction, resp)
}

// InteractionResponse mocks base method.
func (m *MockSession) InteractionResponse(interaction *discordgo.Interaction) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionResponse", interaction)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponse indicates an expected call of InteractionResponse.
func (mr *MockSessionMockRecorder) InteractionResponse(interaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponse", reflect.TypeOf((*MockSession)(nil).InteractionResponse), interaction)
}

// InteractionResponseDelete mocks base method.
func (m *MockSession) InteractionResponseDelete(interaction *discordgo.Interaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionResponseDelete", interaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// InteractionResponseDelete indicates an expected call of InteractionResponseDelete.
func (mr *MockSessionMockRecorder) InteractionResponseDelete(interaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseDelete", reflect.TypeOf((*MockSession)(nil).InteractionResponseDelete), interaction)
}

// InteractionResponseEdit mocks base method.
func (m *MockSession) InteractionResponseEdit(interaction *discordgo.Interaction, newresp *discordgo.WebhookEdit) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InteractionResponseEdit", interaction, newresp)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InteractionResponseEdit indicates an expected call of InteractionResponseEdit.
func (mr *MockSessionMockRecorder) InteractionResponseEdit(interaction, newresp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InteractionResponseEdit", reflect.TypeOf((*MockSession)(nil).InteractionResponseEdit), interaction, newresp)
}

// Invite mocks base method.
func (m *MockSession) Invite(inviteID string) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invite", inviteID)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Invite indicates an expected call of Invite.
func (mr *MockSessionMockRecorder) Invite(inviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invite", reflect.TypeOf((*MockSession)(nil).Invite), inviteID)
}

// InviteAccept mocks base method.
func (m *MockSession) InviteAccept(inviteID string) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteAccept", inviteID)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteAccept indicates an expected call of InviteAccept.
func (mr *MockSessionMockRecorder) InviteAccept(inviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteAccept", reflect.TypeOf((*MockSession)(nil).InviteAccept), inviteID)
}

// InviteComplex mocks base method.
func (m *MockSession) InviteComplex(inviteID, guildScheduledEventID string, withCounts, withExpiration bool) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteComplex", inviteID, guildScheduledEventID, withCounts, withExpiration)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteComplex indicates an expected call of InviteComplex.
func (mr *MockSessionMockRecorder) InviteComplex(inviteID, guildScheduledEventID, withCounts, withExpiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteComplex", reflect.TypeOf((*MockSession)(nil).InviteComplex), inviteID, guildScheduledEventID, withCounts, withExpiration)
}

// InviteDelete mocks base method.
func (m *MockSession) InviteDelete(inviteID string) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteDelete", inviteID)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteDelete indicates an expected call of InviteDelete.
func (mr *MockSessionMockRecorder) InviteDelete(inviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteDelete", reflect.TypeOf((*MockSession)(nil).InviteDelete), inviteID)
}

// InviteWithCounts mocks base method.
func (m *MockSession) InviteWithCounts(inviteID string) (*discordgo.Invite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteWithCounts", inviteID)
	ret0, _ := ret[0].(*discordgo.Invite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteWithCounts indicates an expected call of InviteWithCounts.
func (mr *MockSessionMockRecorder) InviteWithCounts(inviteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteWithCounts", reflect.TypeOf((*MockSession)(nil).InviteWithCounts), inviteID)
}

// MessageReactionAdd mocks base method.
func (m *MockSession) MessageReactionAdd(channelID, messageID, emojiID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionAdd", channelID, messageID, emojiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionAdd indicates an expected call of MessageReactionAdd.
func (mr *MockSessionMockRecorder) MessageReactionAdd(channelID, messageID, emojiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionAdd", reflect.TypeOf((*MockSession)(nil).MessageReactionAdd), channelID, messageID, emojiID)
}

// MessageReactionRemove mocks base method.
func (m *MockSession) MessageReactionRemove(channelID, messageID, emojiID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionRemove", channelID, messageID, emojiID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionRemove indicates an expected call of MessageReactionRemove.
func (mr *MockSessionMockRecorder) MessageReactionRemove(channelID, messageID, emojiID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionRemove", reflect.TypeOf((*MockSession)(nil).MessageReactionRemove), channelID, messageID, emojiID, userID)
}

// MessageReactions mocks base method.
func (m *MockSession) MessageReactions(channelID, messageID, emojiID string, limit int, beforeID, afterID string) ([]*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactions", channelID, messageID, emojiID, limit, beforeID, afterID)
	ret0, _ := ret[0].([]*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageReactions indicates an expected call of MessageReactions.
func (mr *MockSessionMockRecorder) MessageReactions(channelID, messageID, emojiID, limit, beforeID, afterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactions", reflect.TypeOf((*MockSession)(nil).MessageReactions), channelID, messageID, emojiID, limit, beforeID, afterID)
}

// MessageReactionsRemoveAll mocks base method.
func (m *MockSession) MessageReactionsRemoveAll(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionsRemoveAll", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionsRemoveAll indicates an expected call of MessageReactionsRemoveAll.
func (mr *MockSessionMockRecorder) MessageReactionsRemoveAll(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionsRemoveAll", reflect.TypeOf((*MockSession)(nil).MessageReactionsRemoveAll), channelID, messageID)
}

// MessageReactionsRemoveEmoji mocks base method.
func (m *MockSession) MessageReactionsRemoveEmoji(channelID, messageID, emojiID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageReactionsRemoveEmoji", channelID, messageID, emojiID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MessageReactionsRemoveEmoji indicates an expected call of MessageReactionsRemoveEmoji.
func (mr *MockSessionMockRecorder) MessageReactionsRemoveEmoji(channelID, messageID, emojiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageReactionsRemoveEmoji", reflect.TypeOf((*MockSession)(nil).MessageReactionsRemoveEmoji), channelID, messageID, emojiID)
}

// MessageThreadStart mocks base method.
func (m *MockSession) MessageThreadStart(channelID, messageID, name string, archiveDuration int) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageThreadStart", channelID, messageID, name, archiveDuration)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageThreadStart indicates an expected call of MessageThreadStart.
func (mr *MockSessionMockRecorder) MessageThreadStart(channelID, messageID, name, archiveDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageThreadStart", reflect.TypeOf((*MockSession)(nil).MessageThreadStart), channelID, messageID, name, archiveDuration)
}

// MessageThreadStartComplex mocks base method.
func (m *MockSession) MessageThreadStartComplex(channelID, messageID string, data *discordgo.ThreadStart) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageThreadStartComplex", channelID, messageID, data)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessageThreadStartComplex indicates an expected call of MessageThreadStartComplex.
func (mr *MockSessionMockRecorder) MessageThreadStartComplex(channelID, messageID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageThreadStartComplex", reflect.TypeOf((*MockSession)(nil).MessageThreadStartComplex), channelID, messageID, data)
}

// Request mocks base method.
func (m *MockSession) Request(method, urlStr string, data interface{}) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", method, urlStr, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockSessionMockRecorder) Request(method, urlStr, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockSession)(nil).Request), method, urlStr, data)
}

// RequestWithBucketID mocks base method.
func (m *MockSession) RequestWithBucketID(method, urlStr string, data interface{}, bucketID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithBucketID", method, urlStr, data, bucketID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithBucketID indicates an expected call of RequestWithBucketID.
func (mr *MockSessionMockRecorder) RequestWithBucketID(method, urlStr, data, bucketID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithBucketID", reflect.TypeOf((*MockSession)(nil).RequestWithBucketID), method, urlStr, data, bucketID)
}

// RequestWithLockedBucket mocks base method.
func (m *MockSession) RequestWithLockedBucket(method, urlStr, contentType string, b []byte, bucket *discordgo.Bucket, sequence int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestWithLockedBucket", method, urlStr, contentType, b, bucket, sequence)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestWithLockedBucket indicates an expected call of RequestWithLockedBucket.
func (mr *MockSessionMockRecorder) RequestWithLockedBucket(method, urlStr, contentType, b, bucket, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestWithLockedBucket", reflect.TypeOf((*MockSession)(nil).RequestWithLockedBucket), method, urlStr, contentType, b, bucket, sequence)
}

// StageInstance mocks base method.
func (m *MockSession) StageInstance(channelID string) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageInstance", channelID)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstance indicates an expected call of StageInstance.
func (mr *MockSessionMockRecorder) StageInstance(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstance", reflect.TypeOf((*MockSession)(nil).StageInstance), channelID)
}

// StageInstanceCreate mocks base method.
func (m *MockSession) StageInstanceCreate(data *discordgo.StageInstanceParams) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageInstanceCreate", data)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstanceCreate indicates an expected call of StageInstanceCreate.
func (mr *MockSessionMockRecorder) StageInstanceCreate(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceCreate", reflect.TypeOf((*MockSession)(nil).StageInstanceCreate), data)
}

// StageInstanceDelete mocks base method.
func (m *MockSession) StageInstanceDelete(channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageInstanceDelete", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StageInstanceDelete indicates an expected call of StageInstanceDelete.
func (mr *MockSessionMockRecorder) StageInstanceDelete(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceDelete", reflect.TypeOf((*MockSession)(nil).StageInstanceDelete), channelID)
}

// StageInstanceEdit mocks base method.
func (m *MockSession) StageInstanceEdit(channelID string, data *discordgo.StageInstanceParams) (*discordgo.StageInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StageInstanceEdit", channelID, data)
	ret0, _ := ret[0].(*discordgo.StageInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StageInstanceEdit indicates an expected call of StageInstanceEdit.
func (mr *MockSessionMockRecorder) StageInstanceEdit(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StageInstanceEdit", reflect.TypeOf((*MockSession)(nil).StageInstanceEdit), channelID, data)
}

// ThreadJoin mocks base method.
func (m *MockSession) ThreadJoin(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadJoin", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadJoin indicates an expected call of ThreadJoin.
func (mr *MockSessionMockRecorder) ThreadJoin(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadJoin", reflect.TypeOf((*MockSession)(nil).ThreadJoin), id)
}

// ThreadLeave mocks base method.
func (m *MockSession) ThreadLeave(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadLeave", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadLeave indicates an expected call of ThreadLeave.
func (mr *MockSessionMockRecorder) ThreadLeave(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadLeave", reflect.TypeOf((*MockSession)(nil).ThreadLeave), id)
}

// ThreadMember mocks base method.
func (m *MockSession) ThreadMember(threadID, memberID string) (*discordgo.ThreadMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadMember", threadID, memberID)
	ret0, _ := ret[0].(*discordgo.ThreadMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadMember indicates an expected call of ThreadMember.
func (mr *MockSessionMockRecorder) ThreadMember(threadID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMember", reflect.TypeOf((*MockSession)(nil).ThreadMember), threadID, memberID)
}

// ThreadMemberAdd mocks base method.
func (m *MockSession) ThreadMemberAdd(threadID, memberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadMemberAdd", threadID, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMemberAdd indicates an expected call of ThreadMemberAdd.
func (mr *MockSessionMockRecorder) ThreadMemberAdd(threadID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMemberAdd", reflect.TypeOf((*MockSession)(nil).ThreadMemberAdd), threadID, memberID)
}

// ThreadMemberRemove mocks base method.
func (m *MockSession) ThreadMemberRemove(threadID, memberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadMemberRemove", threadID, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ThreadMemberRemove indicates an expected call of ThreadMemberRemove.
func (mr *MockSessionMockRecorder) ThreadMemberRemove(threadID, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMemberRemove", reflect.TypeOf((*MockSession)(nil).ThreadMemberRemove), threadID, memberID)
}

// ThreadMembers mocks base method.
func (m *MockSession) ThreadMembers(threadID string) ([]*discordgo.ThreadMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadMembers", threadID)
	ret0, _ := ret[0].([]*discordgo.ThreadMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadMembers indicates an expected call of ThreadMembers.
func (mr *MockSessionMockRecorder) ThreadMembers(threadID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadMembers", reflect.TypeOf((*MockSession)(nil).ThreadMembers), threadID)
}

// ThreadStart mocks base method.
func (m *MockSession) ThreadStart(channelID, name string, typ discordgo.ChannelType, archiveDuration int) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadStart", channelID, name, typ, archiveDuration)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadStart indicates an expected call of ThreadStart.
func (mr *MockSessionMockRecorder) ThreadStart(channelID, name, typ, archiveDuration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadStart", reflect.TypeOf((*MockSession)(nil).ThreadStart), channelID, name, typ, archiveDuration)
}

// ThreadStartComplex mocks base method.
func (m *MockSession) ThreadStartComplex(channelID string, data *discordgo.ThreadStart) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadStartComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadStartComplex indicates an expected call of ThreadStartComplex.
func (mr *MockSessionMockRecorder) ThreadStartComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadStartComplex", reflect.TypeOf((*MockSession)(nil).ThreadStartComplex), channelID, data)
}

// ThreadsActive mocks base method.
func (m *MockSession) ThreadsActive(channelID string) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadsActive", channelID)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsActive indicates an expected call of ThreadsActive.
func (mr *MockSessionMockRecorder) ThreadsActive(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsActive", reflect.TypeOf((*MockSession)(nil).ThreadsActive), channelID)
}

// ThreadsArchived mocks base method.
func (m *MockSession) ThreadsArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadsArchived", channelID, before, limit)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsArchived indicates an expected call of ThreadsArchived.
func (mr *MockSessionMockRecorder) ThreadsArchived(channelID, before, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsArchived", reflect.TypeOf((*MockSession)(nil).ThreadsArchived), channelID, before, limit)
}

// ThreadsPrivateArchived mocks base method.
func (m *MockSession) ThreadsPrivateArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadsPrivateArchived", channelID, before, limit)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsPrivateArchived indicates an expected call of ThreadsPrivateArchived.
func (mr *MockSessionMockRecorder) ThreadsPrivateArchived(channelID, before, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsPrivateArchived", reflect.TypeOf((*MockSession)(nil).ThreadsPrivateArchived), channelID, before, limit)
}

// ThreadsPrivateJoinedArchived mocks base method.
func (m *MockSession) ThreadsPrivateJoinedArchived(channelID string, before *time.Time, limit int) (*discordgo.ThreadsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThreadsPrivateJoinedArchived", channelID, before, limit)
	ret0, _ := ret[0].(*discordgo.ThreadsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ThreadsPrivateJoinedArchived indicates an expected call of ThreadsPrivateJoinedArchived.
func (mr *MockSessionMockRecorder) ThreadsPrivateJoinedArchived(channelID, before, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThreadsPrivateJoinedArchived", reflect.TypeOf((*MockSession)(nil).ThreadsPrivateJoinedArchived), channelID, before, limit)
}

// User mocks base method.
func (m *MockSession) User(userID string) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", userID)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockSessionMockRecorder) User(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockSession)(nil).User), userID)
}

// UserAvatar mocks base method.
func (m *MockSession) UserAvatar(userID string) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAvatar", userID)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAvatar indicates an expected call of UserAvatar.
func (mr *MockSessionMockRecorder) UserAvatar(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAvatar", reflect.TypeOf((*MockSession)(nil).UserAvatar), userID)
}

// UserAvatarDecode mocks base method.
func (m *MockSession) UserAvatarDecode(u *discordgo.User) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAvatarDecode", u)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAvatarDecode indicates an expected call of UserAvatarDecode.
func (mr *MockSessionMockRecorder) UserAvatarDecode(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAvatarDecode", reflect.TypeOf((*MockSession)(nil).UserAvatarDecode), u)
}

// UserChannelCreate mocks base method.
func (m *MockSession) UserChannelCreate(recipientID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelCreate", recipientID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockSessionMockRecorder) UserChannelCreate(recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockSession)(nil).UserChannelCreate), recipientID)
}

// UserChannelPermissions mocks base method.
func (m *MockSession) UserChannelPermissions(userID, channelID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelPermissions", userID, channelID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelPermissions indicates an expected call of UserChannelPermissions.
func (mr *MockSessionMockRecorder) UserChannelPermissions(userID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelPermissions", reflect.TypeOf((*MockSession)(nil).UserChannelPermissions), userID, channelID)
}

// UserConnections mocks base method.
func (m *MockSession) UserConnections() ([]*discordgo.UserConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserConnections")
	ret0, _ := ret[0].([]*discordgo.UserConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserConnections indicates an expected call of UserConnections.
func (mr *MockSessionMockRecorder) UserConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserConnections", reflect.TypeOf((*MockSession)(nil).UserConnections))
}

// UserGuildMember mocks base method.
func (m *MockSession) UserGuildMember(guildID string) (*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGuildMember", guildID)
	ret0, _ := ret[0].(*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGuildMember indicates an expected call of UserGuildMember.
func (mr *MockSessionMockRecorder) UserGuildMember(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGuildMember", reflect.TypeOf((*MockSession)(nil).UserGuildMember), guildID)
}

// UserGuilds mocks base method.
func (m *MockSession) UserGuilds(limit int, beforeID, afterID string) ([]*discordgo.UserGuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGuilds", limit, beforeID, afterID)
	ret0, _ := ret[0].([]*discordgo.UserGuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGuilds indicates an expected call of UserGuilds.
func (mr *MockSessionMockRecorder) UserGuilds(limit, beforeID, afterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGuilds", reflect.TypeOf((*MockSession)(nil).UserGuilds), limit, beforeID, afterID)
}

// UserUpdate mocks base method.
func (m *MockSession) UserUpdate(username, avatar string) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", username, avatar)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockSessionMockRecorder) UserUpdate(username, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockSession)(nil).UserUpdate), username, avatar)
}

// VoiceRegions mocks base method.
func (m *MockSession) VoiceRegions() ([]*discordgo.VoiceRegion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoiceRegions")
	ret0, _ := ret[0].([]*discordgo.VoiceRegion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VoiceRegions indicates an expected call of VoiceRegions.
func (mr *MockSessionMockRecorder) VoiceRegions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoiceRegions", reflect.TypeOf((*MockSession)(nil).VoiceRegions))
}

// Webhook mocks base method.
func (m *MockSession) Webhook(webhookID string) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Webhook", webhookID)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Webhook indicates an expected call of Webhook.
func (mr *MockSessionMockRecorder) Webhook(webhookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Webhook", reflect.TypeOf((*MockSession)(nil).Webhook), webhookID)
}

// WebhookCreate mocks base method.
func (m *MockSession) WebhookCreate(channelID, name, avatar string) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookCreate", channelID, name, avatar)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookCreate indicates an expected call of WebhookCreate.
func (mr *MockSessionMockRecorder) WebhookCreate(channelID, name, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookCreate", reflect.TypeOf((*MockSession)(nil).WebhookCreate), channelID, name, avatar)
}

// WebhookDelete mocks base method.
func (m *MockSession) WebhookDelete(webhookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookDelete", webhookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookDelete indicates an expected call of WebhookDelete.
func (mr *MockSessionMockRecorder) WebhookDelete(webhookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookDelete", reflect.TypeOf((*MockSession)(nil).WebhookDelete), webhookID)
}

// WebhookDeleteWithToken mocks base method.
func (m *MockSession) WebhookDeleteWithToken(webhookID, token string) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookDeleteWithToken", webhookID, token)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookDeleteWithToken indicates an expected call of WebhookDeleteWithToken.
func (mr *MockSessionMockRecorder) WebhookDeleteWithToken(webhookID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookDeleteWithToken", reflect.TypeOf((*MockSession)(nil).WebhookDeleteWithToken), webhookID, token)
}

// WebhookEdit mocks base method.
func (m *MockSession) WebhookEdit(webhookID, name, avatar, channelID string) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookEdit", webhookID, name, avatar, channelID)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookEdit indicates an expected call of WebhookEdit.
func (mr *MockSessionMockRecorder) WebhookEdit(webhookID, name, avatar, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookEdit", reflect.TypeOf((*MockSession)(nil).WebhookEdit), webhookID, name, avatar, channelID)
}

// WebhookEditWithToken mocks base method.
func (m *MockSession) WebhookEditWithToken(webhookID, token, name, avatar string) (*discordgo.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookEditWithToken", webhookID, token, name, avatar)
	ret0, _ := ret[0].(*discordgo.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookEditWithToken indicates an expected call of WebhookEditWithToken.
func (mr *MockSessionMockRecorder) WebhookEditWithToken(webhookID, token, name, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookEditWithToken", reflect.TypeOf((*MockSession)(nil).WebhookEditWithToken), webhookID, token, name, avatar)
}

// WebhookExecute mocks base method.
func (m *MockSession) WebhookExecute(webhookID, token string, wait bool, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookExecute", webhookID, token, wait, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookExecute indicates an expected call of WebhookExecute.
func (mr *MockSessionMockRecorder) WebhookExecute(webhookID, token, wait, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookExecute", reflect.TypeOf((*MockSession)(nil).WebhookExecute), webhookID, token, wait, data)
}

// WebhookMessage mocks base method.
func (m *MockSession) WebhookMessage(webhookID, token, messageID string) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookMessage", webhookID, token, messageID)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookMessage indicates an expected call of WebhookMessage.
func (mr *MockSessionMockRecorder) WebhookMessage(webhookID, token, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessage", reflect.TypeOf((*MockSession)(nil).WebhookMessage), webhookID, token, messageID)
}

// WebhookMessageDelete mocks base method.
func (m *MockSession) WebhookMessageDelete(webhookID, token, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookMessageDelete", webhookID, token, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WebhookMessageDelete indicates an expected call of WebhookMessageDelete.
func (mr *MockSessionMockRecorder) WebhookMessageDelete(webhookID, token, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessageDelete", reflect.TypeOf((*MockSession)(nil).WebhookMessageDelete), webhookID, token, messageID)
}

// WebhookMessageEdit mocks base method.
func (m *MockSession) WebhookMessageEdit(webhookID, token, messageID string, data *discordgo.WebhookEdit) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookMessageEdit", webhookID, token, messageID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookMessageEdit indicates an expected call of WebhookMessageEdit.
func (mr *MockSessionMockRecorder) WebhookMessageEdit(webhookID, token, messageID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookMessageEdit", reflect.TypeOf((*MockSession)(nil).WebhookMessageEdit), webhookID, token, messageID, data)
}

// WebhookThreadExecute mocks base method.
func (m *MockSession) WebhookThreadExecute(webhookID, token string, wait bool, threadID string, data *discordgo.WebhookParams) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookThreadExecute", webhookID, token, wait, threadID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookThreadExecute indicates an expected call of WebhookThreadExecute.
func (mr *MockSessionMockRecorder) WebhookThreadExecute(webhookID, token, wait, threadID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookThreadExecute", reflect.TypeOf((*MockSession)(nil).WebhookThreadExecute), webhookID, token, wait, threadID, data)
}

// WebhookWithToken mocks base method.
func (m *MockSession) WebhookWithToken(webhookID, token string) (*discordgo.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WebhookWithToken", webhookID, token)
	ret0, _ := ret[0].(*discordgo.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WebhookWithToken indicates an expected call of WebhookWithToken.
func (mr *MockSessionMockRecorder) WebhookWithToken(webhookID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WebhookWithToken", reflect.TypeOf((*MockSession)(nil).WebhookWithToken), webhookID, token)
}
